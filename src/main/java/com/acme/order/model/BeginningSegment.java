/**
 * This class was generated by Smooks EJC (http://www.smooks.org).
 */
package com.acme.order.model;

import java.io.Serializable;    
import org.milyn.smooks.edi.EDIWritable;    
import java.util.Date;    
import org.milyn.javabean.decoders.DateDecoder;    
import java.io.Writer;    
import org.milyn.edisax.model.internal.Delimiters;    
import java.io.IOException;    
import java.util.Properties;    

public class BeginningSegment implements Serializable, EDIWritable {

    private static final long serialVersionUID = 1L;

    private Date invoiceDate;
    private DateDecoder invoiceDateEncoder;
    private String invoiceNumber;
    private Date poDate;
    private DateDecoder poDateEncoder;
    private String poNumber;
    private String transactionTypeCode;

    public BeginningSegment() {
        
        invoiceDateEncoder = new DateDecoder();
        Properties invoiceDateEncoderProperties = new Properties();
        invoiceDateEncoderProperties.setProperty("format", "yyyyMMdd");
        invoiceDateEncoder.setConfiguration(invoiceDateEncoderProperties);
        poDateEncoder = new DateDecoder();
        Properties poDateEncoderProperties = new Properties();
        poDateEncoderProperties.setProperty("format", "yyyyMMdd");
        poDateEncoder.setConfiguration(poDateEncoderProperties);
    }

    public void write(Writer writer, Delimiters delimiters) throws IOException {
        
        Writer nodeWriter = writer;

        if(invoiceDate != null) {
            nodeWriter.write(delimiters.escape(invoiceDateEncoder.encode(invoiceDate)));
        }
        nodeWriter.write(delimiters.getField());
        if(invoiceNumber != null) {
            nodeWriter.write(delimiters.escape(invoiceNumber.toString()));
        }
        nodeWriter.write(delimiters.getField());
        if(poDate != null) {
            nodeWriter.write(delimiters.escape(poDateEncoder.encode(poDate)));
        }
        nodeWriter.write(delimiters.getField());
        if(poNumber != null) {
            nodeWriter.write(delimiters.escape(poNumber.toString()));
        }
        nodeWriter.write(delimiters.getField());
        if(transactionTypeCode != null) {
            nodeWriter.write(delimiters.escape(transactionTypeCode.toString()));
        }
        writer.write(delimiters.getSegmentDelimiter());
        writer.flush();
    }

    public Date getInvoiceDate() {
        return invoiceDate;
    }

    public BeginningSegment setInvoiceDate(Date invoiceDate) {
        this.invoiceDate = invoiceDate;  return this;
    }

    public String getInvoiceNumber() {
        return invoiceNumber;
    }

    public BeginningSegment setInvoiceNumber(String invoiceNumber) {
        this.invoiceNumber = invoiceNumber;  return this;
    }

    public Date getPoDate() {
        return poDate;
    }

    public BeginningSegment setPoDate(Date poDate) {
        this.poDate = poDate;  return this;
    }

    public String getPoNumber() {
        return poNumber;
    }

    public BeginningSegment setPoNumber(String poNumber) {
        this.poNumber = poNumber;  return this;
    }

    public String getTransactionTypeCode() {
        return transactionTypeCode;
    }

    public BeginningSegment setTransactionTypeCode(String transactionTypeCode) {
        this.transactionTypeCode = transactionTypeCode;  return this;
    }
}