/**
 * This class was generated by Smooks EJC (http://www.smooks.org).
 */
package com.acme.order.model;

import java.io.Serializable;    
import org.milyn.smooks.edi.EDIWritable;    
import java.math.BigDecimal;    
import org.milyn.javabean.decoders.BigDecimalDecoder;    
import java.io.Writer;    
import org.milyn.edisax.model.internal.Delimiters;    
import java.io.IOException;    

public class TotalMonetaryValueSummary implements Serializable, EDIWritable {

    private static final long serialVersionUID = 1L;

    private BigDecimal totalInvoiceAmount;
    private BigDecimalDecoder totalInvoiceAmountEncoder;
    private BigDecimal termsDiscountCalculated;
    private BigDecimalDecoder termsDiscountCalculatedEncoder;
    private BigDecimal discountAmountDue;
    private BigDecimalDecoder discountAmountDueEncoder;
    private BigDecimal termsDiscountAcount;
    private BigDecimalDecoder termsDiscountAcountEncoder;

    public TotalMonetaryValueSummary() {
        
        totalInvoiceAmountEncoder = new BigDecimalDecoder();
        termsDiscountCalculatedEncoder = new BigDecimalDecoder();
        discountAmountDueEncoder = new BigDecimalDecoder();
        termsDiscountAcountEncoder = new BigDecimalDecoder();
    }

    public void write(Writer writer, Delimiters delimiters) throws IOException {
        
        Writer nodeWriter = writer;

        if(totalInvoiceAmount != null) {
            nodeWriter.write(delimiters.escape(totalInvoiceAmountEncoder.encode(totalInvoiceAmount)));
        }
        nodeWriter.write(delimiters.getField());
        if(termsDiscountCalculated != null) {
            nodeWriter.write(delimiters.escape(termsDiscountCalculatedEncoder.encode(termsDiscountCalculated)));
        }
        nodeWriter.write(delimiters.getField());
        if(discountAmountDue != null) {
            nodeWriter.write(delimiters.escape(discountAmountDueEncoder.encode(discountAmountDue)));
        }
        nodeWriter.write(delimiters.getField());
        if(termsDiscountAcount != null) {
            nodeWriter.write(delimiters.escape(termsDiscountAcountEncoder.encode(termsDiscountAcount)));
        }
        writer.write(delimiters.getSegmentDelimiter());
        writer.flush();
    }

    public BigDecimal getTotalInvoiceAmount() {
        return totalInvoiceAmount;
    }

    public TotalMonetaryValueSummary setTotalInvoiceAmount(BigDecimal totalInvoiceAmount) {
        this.totalInvoiceAmount = totalInvoiceAmount;  return this;
    }

    public BigDecimal getTermsDiscountCalculated() {
        return termsDiscountCalculated;
    }

    public TotalMonetaryValueSummary setTermsDiscountCalculated(BigDecimal termsDiscountCalculated) {
        this.termsDiscountCalculated = termsDiscountCalculated;  return this;
    }

    public BigDecimal getDiscountAmountDue() {
        return discountAmountDue;
    }

    public TotalMonetaryValueSummary setDiscountAmountDue(BigDecimal discountAmountDue) {
        this.discountAmountDue = discountAmountDue;  return this;
    }

    public BigDecimal getTermsDiscountAcount() {
        return termsDiscountAcount;
    }

    public TotalMonetaryValueSummary setTermsDiscountAcount(BigDecimal termsDiscountAcount) {
        this.termsDiscountAcount = termsDiscountAcount;  return this;
    }
}