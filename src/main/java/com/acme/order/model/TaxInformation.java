/**
 * This class was generated by Smooks EJC (http://www.smooks.org).
 */
package com.acme.order.model;

import java.io.Serializable;    
import org.milyn.smooks.edi.EDIWritable;    
import java.math.BigDecimal;    
import org.milyn.javabean.decoders.BigDecimalDecoder;    
import java.io.Writer;    
import org.milyn.edisax.model.internal.Delimiters;    
import java.io.IOException;    

public class TaxInformation implements Serializable, EDIWritable {

    private static final long serialVersionUID = 1L;

    private String taxTypeCode;
    private BigDecimal monetaryAmount;
    private BigDecimalDecoder monetaryAmountEncoder;
    private String percentage;
    private String taxJurisdictionCodeQualifier;
    private String taxJurisdictionCode;
    private String taxExemptCode;

    public TaxInformation() {
        
        monetaryAmountEncoder = new BigDecimalDecoder();
    }

    public void write(Writer writer, Delimiters delimiters) throws IOException {
        
        Writer nodeWriter = writer;

        if(taxTypeCode != null) {
            nodeWriter.write(delimiters.escape(taxTypeCode.toString()));
        }
        nodeWriter.write(delimiters.getField());
        if(monetaryAmount != null) {
            nodeWriter.write(delimiters.escape(monetaryAmountEncoder.encode(monetaryAmount)));
        }
        nodeWriter.write(delimiters.getField());
        if(percentage != null) {
            nodeWriter.write(delimiters.escape(percentage.toString()));
        }
        nodeWriter.write(delimiters.getField());
        if(taxJurisdictionCodeQualifier != null) {
            nodeWriter.write(delimiters.escape(taxJurisdictionCodeQualifier.toString()));
        }
        nodeWriter.write(delimiters.getField());
        if(taxJurisdictionCode != null) {
            nodeWriter.write(delimiters.escape(taxJurisdictionCode.toString()));
        }
        nodeWriter.write(delimiters.getField());
        if(taxExemptCode != null) {
            nodeWriter.write(delimiters.escape(taxExemptCode.toString()));
        }
        writer.write(delimiters.getSegmentDelimiter());
        writer.flush();
    }

    public String getTaxTypeCode() {
        return taxTypeCode;
    }

    public TaxInformation setTaxTypeCode(String taxTypeCode) {
        this.taxTypeCode = taxTypeCode;  return this;
    }

    public BigDecimal getMonetaryAmount() {
        return monetaryAmount;
    }

    public TaxInformation setMonetaryAmount(BigDecimal monetaryAmount) {
        this.monetaryAmount = monetaryAmount;  return this;
    }

    public String getPercentage() {
        return percentage;
    }

    public TaxInformation setPercentage(String percentage) {
        this.percentage = percentage;  return this;
    }

    public String getTaxJurisdictionCodeQualifier() {
        return taxJurisdictionCodeQualifier;
    }

    public TaxInformation setTaxJurisdictionCodeQualifier(String taxJurisdictionCodeQualifier) {
        this.taxJurisdictionCodeQualifier = taxJurisdictionCodeQualifier;  return this;
    }

    public String getTaxJurisdictionCode() {
        return taxJurisdictionCode;
    }

    public TaxInformation setTaxJurisdictionCode(String taxJurisdictionCode) {
        this.taxJurisdictionCode = taxJurisdictionCode;  return this;
    }

    public String getTaxExemptCode() {
        return taxExemptCode;
    }

    public TaxInformation setTaxExemptCode(String taxExemptCode) {
        this.taxExemptCode = taxExemptCode;  return this;
    }
}