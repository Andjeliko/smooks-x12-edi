/**
 * This class was generated by Smooks EJC (http://www.smooks.org).
 */
package com.acme.order.model;

import java.io.Serializable;    
import org.milyn.smooks.edi.EDIWritable;    
import org.milyn.smooks.edi.EDIMessage;    
import java.io.Writer;    
import org.milyn.edisax.model.internal.Delimiters;    
import java.io.IOException;    

@EDIMessage    
public class Invoice implements Serializable, EDIWritable {

    private static final long serialVersionUID = 1L;

    private TransactionSetHeader transactionSetHeader;
    private BeginningSegment beginningSegment;
    private Note note;
    private Currency currency;
    private ReferenceNumber referenceNumber;
    private AdministrativeCommunicationsContact administrativeCommunicationsContact;
    private Name name;
    private AdditionalName additionalName;
    private AddressInformation addressInformation;
    private GeographicLocation geographicLocation;
    private TermsOfSale termsOfSale;
    private DateTimeReference dateTimeReference;
    private CarrierDetail carrierDetail;
    private SpacInformation spacInformation;
    private SublineItemDetail sublineItemDetail;
    private TotalMonetaryValueSummary totalMonetaryValueSummary;
    private TaxInformation taxInformation;
    private InvoiceShipmentSummary invoiceShipmentSummary;
    private TransactionTotals transactionTotals;
    private TransactionSetTrailer transactionSetTrailer;

    public void write(Writer writer, Delimiters delimiters) throws IOException {
        
        Writer nodeWriter = writer;

        if(transactionSetHeader != null) {
            nodeWriter.write("ST");
            nodeWriter.write(delimiters.getField());
            transactionSetHeader.write(nodeWriter, delimiters);
        }
        if(beginningSegment != null) {
            nodeWriter.write("BIG");
            nodeWriter.write(delimiters.getField());
            beginningSegment.write(nodeWriter, delimiters);
        }
        if(note != null) {
            nodeWriter.write("NTE");
            nodeWriter.write(delimiters.getField());
            note.write(nodeWriter, delimiters);
        }
        if(currency != null) {
            nodeWriter.write("CUR");
            nodeWriter.write(delimiters.getField());
            currency.write(nodeWriter, delimiters);
        }
        if(referenceNumber != null) {
            nodeWriter.write("REF");
            nodeWriter.write(delimiters.getField());
            referenceNumber.write(nodeWriter, delimiters);
        }
        if(administrativeCommunicationsContact != null) {
            nodeWriter.write("PER");
            nodeWriter.write(delimiters.getField());
            administrativeCommunicationsContact.write(nodeWriter, delimiters);
        }
        if(name != null) {
            nodeWriter.write("N1");
            nodeWriter.write(delimiters.getField());
            name.write(nodeWriter, delimiters);
        }
        if(additionalName != null) {
            nodeWriter.write("N2");
            nodeWriter.write(delimiters.getField());
            additionalName.write(nodeWriter, delimiters);
        }
        if(addressInformation != null) {
            nodeWriter.write("N3");
            nodeWriter.write(delimiters.getField());
            addressInformation.write(nodeWriter, delimiters);
        }
        if(geographicLocation != null) {
            nodeWriter.write("N3");
            nodeWriter.write(delimiters.getField());
            geographicLocation.write(nodeWriter, delimiters);
        }
        if(termsOfSale != null) {
            nodeWriter.write("ITD");
            nodeWriter.write(delimiters.getField());
            termsOfSale.write(nodeWriter, delimiters);
        }
        if(dateTimeReference != null) {
            nodeWriter.write("DTM");
            nodeWriter.write(delimiters.getField());
            dateTimeReference.write(nodeWriter, delimiters);
        }
        if(carrierDetail != null) {
            nodeWriter.write("CAD");
            nodeWriter.write(delimiters.getField());
            carrierDetail.write(nodeWriter, delimiters);
        }
        if(spacInformation != null) {
            nodeWriter.write("SAC");
            nodeWriter.write(delimiters.getField());
            spacInformation.write(nodeWriter, delimiters);
        }
        if(sublineItemDetail != null) {
            nodeWriter.write("SLN");
            nodeWriter.write(delimiters.getField());
            sublineItemDetail.write(nodeWriter, delimiters);
        }
        if(totalMonetaryValueSummary != null) {
            nodeWriter.write("TDS");
            nodeWriter.write(delimiters.getField());
            totalMonetaryValueSummary.write(nodeWriter, delimiters);
        }
        if(taxInformation != null) {
            nodeWriter.write("TXI");
            nodeWriter.write(delimiters.getField());
            taxInformation.write(nodeWriter, delimiters);
        }
        if(invoiceShipmentSummary != null) {
            nodeWriter.write("ISS");
            nodeWriter.write(delimiters.getField());
            invoiceShipmentSummary.write(nodeWriter, delimiters);
        }
        if(transactionTotals != null) {
            nodeWriter.write("CTT");
            nodeWriter.write(delimiters.getField());
            transactionTotals.write(nodeWriter, delimiters);
        }
        if(transactionSetTrailer != null) {
            nodeWriter.write("CTT");
            nodeWriter.write(delimiters.getField());
            transactionSetTrailer.write(nodeWriter, delimiters);
        }
    }

    public TransactionSetHeader getTransactionSetHeader() {
        return transactionSetHeader;
    }

    public Invoice setTransactionSetHeader(TransactionSetHeader transactionSetHeader) {
        this.transactionSetHeader = transactionSetHeader;  return this;
    }

    public BeginningSegment getBeginningSegment() {
        return beginningSegment;
    }

    public Invoice setBeginningSegment(BeginningSegment beginningSegment) {
        this.beginningSegment = beginningSegment;  return this;
    }

    public Note getNote() {
        return note;
    }

    public Invoice setNote(Note note) {
        this.note = note;  return this;
    }

    public Currency getCurrency() {
        return currency;
    }

    public Invoice setCurrency(Currency currency) {
        this.currency = currency;  return this;
    }

    public ReferenceNumber getReferenceNumber() {
        return referenceNumber;
    }

    public Invoice setReferenceNumber(ReferenceNumber referenceNumber) {
        this.referenceNumber = referenceNumber;  return this;
    }

    public AdministrativeCommunicationsContact getAdministrativeCommunicationsContact() {
        return administrativeCommunicationsContact;
    }

    public Invoice setAdministrativeCommunicationsContact(AdministrativeCommunicationsContact administrativeCommunicationsContact) {
        this.administrativeCommunicationsContact = administrativeCommunicationsContact;  return this;
    }

    public Name getName() {
        return name;
    }

    public Invoice setName(Name name) {
        this.name = name;  return this;
    }

    public AdditionalName getAdditionalName() {
        return additionalName;
    }

    public Invoice setAdditionalName(AdditionalName additionalName) {
        this.additionalName = additionalName;  return this;
    }

    public AddressInformation getAddressInformation() {
        return addressInformation;
    }

    public Invoice setAddressInformation(AddressInformation addressInformation) {
        this.addressInformation = addressInformation;  return this;
    }

    public GeographicLocation getGeographicLocation() {
        return geographicLocation;
    }

    public Invoice setGeographicLocation(GeographicLocation geographicLocation) {
        this.geographicLocation = geographicLocation;  return this;
    }

    public TermsOfSale getTermsOfSale() {
        return termsOfSale;
    }

    public Invoice setTermsOfSale(TermsOfSale termsOfSale) {
        this.termsOfSale = termsOfSale;  return this;
    }

    public DateTimeReference getDateTimeReference() {
        return dateTimeReference;
    }

    public Invoice setDateTimeReference(DateTimeReference dateTimeReference) {
        this.dateTimeReference = dateTimeReference;  return this;
    }

    public CarrierDetail getCarrierDetail() {
        return carrierDetail;
    }

    public Invoice setCarrierDetail(CarrierDetail carrierDetail) {
        this.carrierDetail = carrierDetail;  return this;
    }

    public SpacInformation getSpacInformation() {
        return spacInformation;
    }

    public Invoice setSpacInformation(SpacInformation spacInformation) {
        this.spacInformation = spacInformation;  return this;
    }

    public SublineItemDetail getSublineItemDetail() {
        return sublineItemDetail;
    }

    public Invoice setSublineItemDetail(SublineItemDetail sublineItemDetail) {
        this.sublineItemDetail = sublineItemDetail;  return this;
    }

    public TotalMonetaryValueSummary getTotalMonetaryValueSummary() {
        return totalMonetaryValueSummary;
    }

    public Invoice setTotalMonetaryValueSummary(TotalMonetaryValueSummary totalMonetaryValueSummary) {
        this.totalMonetaryValueSummary = totalMonetaryValueSummary;  return this;
    }

    public TaxInformation getTaxInformation() {
        return taxInformation;
    }

    public Invoice setTaxInformation(TaxInformation taxInformation) {
        this.taxInformation = taxInformation;  return this;
    }

    public InvoiceShipmentSummary getInvoiceShipmentSummary() {
        return invoiceShipmentSummary;
    }

    public Invoice setInvoiceShipmentSummary(InvoiceShipmentSummary invoiceShipmentSummary) {
        this.invoiceShipmentSummary = invoiceShipmentSummary;  return this;
    }

    public TransactionTotals getTransactionTotals() {
        return transactionTotals;
    }

    public Invoice setTransactionTotals(TransactionTotals transactionTotals) {
        this.transactionTotals = transactionTotals;  return this;
    }

    public TransactionSetTrailer getTransactionSetTrailer() {
        return transactionSetTrailer;
    }

    public Invoice setTransactionSetTrailer(TransactionSetTrailer transactionSetTrailer) {
        this.transactionSetTrailer = transactionSetTrailer;  return this;
    }
}